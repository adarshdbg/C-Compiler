
================================================================================================================================
							Lexical Analyser for C 
================================================================================================================================

TOKEN TYPE                    		TOKEN VALUE                   		TOKEN LINE NUMBER         
SINGLE LINE COMMENT           		//if-else                     		1                             
SINGLE LINE COMMENT           		//switch-case                 		2                             
SINGLE LINE COMMENT           		//++ operator, -- operator    		3                             
SINGLE LINE COMMENT           		//return                      		4                             
HEADER                        		#include<stdio.h>             		6                             
KEYWORD                       		int                           		8                             
KEYWORD                       		main                          		8                             
LEFT PARENTHESIS              		(                             		8                             
RIGHT PARENTHESIS             		)                             		8                             
LEFT BRACE                    		{                             		9                             
KEYWORD                       		char                          		10                            
IDENTIFIER                    		a                             		10                            
OPERATOR                      		=                             		10                            
CHARACTER                     		'm'                           		10                            
SEMICOLON                     		;                             		10                            
KEYWORD                       		if                            		11                            
LEFT PARENTHESIS              		(                             		11                            
IDENTIFIER                    		a                             		11                            
OPERATOR                      		==                            		11                            
CHARACTER                     		'm'                           		11                            
RIGHT PARENTHESIS             		)                             		11                            
LEFT BRACE                    		{                             		11                            
KEYWORD                       		return                        		12                            
INTEGER                       		1                             		12                            
SEMICOLON                     		;                             		12                            
RIGHT BRACE                   		}                             		13                            
KEYWORD                       		else                          		13                            
LEFT BRACE                    		{                             		13                            
IDENTIFIER                    		a                             		14                            
OPERATOR                      		++                            		14                            
SEMICOLON                     		;                             		14                            
RIGHT BRACE                   		}                             		15                            
FUNCTION                      		switch                        		17                            
LEFT PARENTHESIS              		(                             		17                            
IDENTIFIER                    		a                             		17                            
RIGHT PARENTHESIS             		)                             		17                            
LEFT BRACE                    		{                             		17                            
IDENTIFIER                    		case                          		18                            
CHARACTER                     		'l'                           		18                            
:IDENTIFIER                    		a                             		19                            
OPERATOR                      		++                            		19                            
SEMICOLON                     		;                             		19                            
KEYWORD                       		break                         		20                            
SEMICOLON                     		;                             		20                            
IDENTIFIER                    		case                          		21                            
CHARACTER                     		'm'                           		21                            
:IDENTIFIER                    		a                             		22                            
OPERATOR                      		--                            		22                            
SEMICOLON                     		;                             		22                            
KEYWORD                       		break                         		23                            
SEMICOLON                     		;                             		23                            
IDENTIFIER                    		case                          		24                            
CHARACTER                     		'n'                           		24                            
:IDENTIFIER                    		a                             		25                            
OPERATOR                      		=                             		25                            
IDENTIFIER                    		a                             		25                            
OPERATOR                      		+                             		25                            
INTEGER                       		2                             		25                            
SEMICOLON                     		;                             		25                            
KEYWORD                       		break                         		26                            
SEMICOLON                     		;                             		26                            
IDENTIFIER                    		default                       		27                            
:IDENTIFIER                    		a                             		28                            
OPERATOR                      		=                             		28                            
IDENTIFIER                    		a                             		28                            
OPERATOR                      		+                             		28                            
INTEGER                       		3                             		28                            
SEMICOLON                     		;                             		28                            
RIGHT BRACE                   		}                             		29                            
FUNCTION                      		printf                        		30                            
LEFT PARENTHESIS              		(                             		30                            
STRING                        		"%c"                          		30                            
COMMA                         		,                             		30                            
IDENTIFIER                    		a                             		30                            
RIGHT PARENTHESIS             		)                             		30                            
SEMICOLON                     		;                             		30                            
RIGHT BRACE                   		}                             		31                            


================================================================================================================================
							Symbol Table	
================================================================================================================================
|	Symbol              |	Type                |	Line Number         |
================================================================================================================================
|	default             |	Identfier           |	27                  |
|	printf              |	Function            |	30                  |
|	switch              |	Function            |	17                  |
|	a                   |	Identfier           |	10                  |
|	case                |	Identfier           |	18                  |
================================================================================================================================




================================================================================================================================
							Constant Table	
================================================================================================================================
|	Symbol              |	Type                |	Line Number         |
================================================================================================================================
|	"%c"                |	String              |	30                  |
|	'm'                 |	Character           |	10                  |
|	'l'                 |	Character           |	18                  |
|	'n'                 |	Character           |	24                  |
|	1                   |	Integer             |	12                  |
|	2                   |	Integer             |	25                  |
|	3                   |	Integer             |	28                  |
================================================================================================================================




================================================================================================================================
							Header Table	
================================================================================================================================
|	Symbol              |	Type                |	Line Number         |
================================================================================================================================
|	#include<stdio.h>   |	Header              |	6                   |
================================================================================================================================


